// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Optional but recommended for Neon; Prisma will prefer DIRECT_URL for migrations if present
  directUrl = env("DIRECT_URL")
}

/* ──────────────────────────────────────────────────────────────────────────
   NextAuth default models (compatible with @next-auth/prisma-adapter)
   ────────────────────────────────────────────────────────────────────────── */

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // Custom field we use in the app
  username      String?  @unique

  accounts      Account[]
  sessions      Session[]
  presences     Presence[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ──────────────────────────────────────────────────────────────────────────
   App-specific models (minimal + safe)
   ────────────────────────────────────────────────────────────────────────── */

model Presence {
  id        String   @id @default(cuid())
  userId    String?
  username  String
  room      String
  lastSeen  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([room])
  @@index([username])
}
